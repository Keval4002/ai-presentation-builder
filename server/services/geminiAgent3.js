import { callPollinations } from "../utils/pollinationApi.js";
import pLimit from "p-limit";

/**
 * Enrich slides with generated image URLs.
 * @param {Array} slides - Slides generated by geminiAgent1
 * @returns {Promise<Array>} - Slides with imageUrl added
 */

const limit = pLimit(5);

async function geminiAgent3(slides){
    const imagePromises = slides.map((slide) =>
        limit(async () => {
            const prompt = slide.imageSuggestion?.description || "abstract digital art for a presentation slide";
            const imageUrl = await callPollinations({ prompt });
            return {
                ...slide,
                imageSuggestion: { ...slide.imageSuggestion, imageUrl },
                imageUrl: imageUrl, // Add imageUrl to top level for easier access
                imagePending: false
            };
        })
    );

    const results = await Promise.allSettled(imagePromises);

    return results.map((result, index) => {
        if (result.status === "fulfilled") {
            return result.value;
        }
        // If image generation failed, return original slide with a null image and pending flag
        console.error(`Image generation failed for slide ${slides[index].slideNumber}`, result.reason);
        return {
            ...slides[index],
            imageSuggestion: { ...slides[index].imageSuggestion, imageUrl: null },
            imageUrl: null,
            imagePending: true // Flag that image is still pending/failed
        };
    });
}

export { geminiAgent3 };